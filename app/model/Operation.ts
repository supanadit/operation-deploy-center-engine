export interface OperationInterface {
    operationCode: number; // It will be generated by System
    operation: string; // It Should String eg. Git, Repository
    running: boolean; // Indicating Process is running
    message: string;
    log: OperationLogInterface[];
}

export interface OperationLogInterface {
    dateTime: string;
    name: string;
    description: string;
    status: 'error' | 'normal' | 'warning' | 'danger';
    finish: boolean;
}

export class OperationLog implements OperationLogInterface {
    dateTime: string;
    description: string;
    name: string;
    status: 'error' | 'normal' | 'warning' | 'danger';
    finish: boolean;

    constructor(operationLog: OperationLogInterface) {
        this.dateTime = operationLog.dateTime;
        this.description = operationLog.description;
        this.name = operationLog.name;
        this.status = operationLog.status;
        this.finish = operationLog.finish;
    }

    stop() {
        this.finish = true;
    }
}

export class Operation implements OperationInterface {
    log: OperationLogInterface[];
    message: string;
    operation: string;
    operationCode: number;
    running: boolean;

    constructor(operation: OperationInterface) {
        this.log = operation.log;
        this.message = operation.message;
        this.operation = operation.operation;
        this.operationCode = operation.operationCode;
        this.running = operation.running;
    }

    stop() {
        this.running = false;
    }

    setOperationLogFinish(operationLog: OperationLog) {
        operationLog.stop();
        const index: number = this.log.indexOf(operationLog);
        if (typeof index != 'undefined') {
            this.log[index] = operationLog;
        }
    }

    addOperationLog(operationLog: OperationLog) {
        this.log.push(operationLog);
    }
}
